/*
 * WSO2 API Manager - Gateway
 * This document specifies a **RESTful API** for WSO2 **API Manager** - Gateway. Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.5.176/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification. 
 *
 * OpenAPI spec version: v1
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.wso2.am.integration.clients.gateway.api;

import org.wso2.am.integration.clients.gateway.ApiCallback;
import org.wso2.am.integration.clients.gateway.ApiClient;
import org.wso2.am.integration.clients.gateway.ApiException;
import org.wso2.am.integration.clients.gateway.ApiResponse;
import org.wso2.am.integration.clients.gateway.Configuration;
import org.wso2.am.integration.clients.gateway.Pair;
import org.wso2.am.integration.clients.gateway.ProgressRequestBody;
import org.wso2.am.integration.clients.gateway.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.wso2.am.integration.clients.gateway.api.dto.DeployResponseDTO;
import org.wso2.am.integration.clients.gateway.api.dto.ErrorDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeployApiApi {
    private ApiClient apiClient;

    public DeployApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeployApiApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deployApiPost
     * @param apiName Name of the API  (required)
     * @param label Label of the API Gateway  (required)
     * @param apiId **API ID** consisting of the **UUID** of the API. The combination of the provider of the API, name of the API and the version is also accepted as a valid API I. Should be formatted as **provider-name-version**.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deployApiPostCall(String apiName, String label, String apiId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deploy-api";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiName", apiName));
        if (label != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("label", label));
        if (apiId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiId", apiId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deployApiPostValidateBeforeCall(String apiName, String label, String apiId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiName' is set
        if (apiName == null) {
            throw new ApiException("Missing the required parameter 'apiName' when calling deployApiPost(Async)");
        }
        
        // verify the required parameter 'label' is set
        if (label == null) {
            throw new ApiException("Missing the required parameter 'label' when calling deployApiPost(Async)");
        }
        
        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling deployApiPost(Async)");
        }
        

        com.squareup.okhttp.Call call = deployApiPostCall(apiName, label, apiId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deploy the API in the gateway
     * This operation is used to deploy and API in the gateway. 
     * @param apiName Name of the API  (required)
     * @param label Label of the API Gateway  (required)
     * @param apiId **API ID** consisting of the **UUID** of the API. The combination of the provider of the API, name of the API and the version is also accepted as a valid API I. Should be formatted as **provider-name-version**.  (required)
     * @return DeployResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeployResponseDTO deployApiPost(String apiName, String label, String apiId) throws ApiException {
        ApiResponse<DeployResponseDTO> resp = deployApiPostWithHttpInfo(apiName, label, apiId);
        return resp.getData();
    }

    /**
     * Deploy the API in the gateway
     * This operation is used to deploy and API in the gateway. 
     * @param apiName Name of the API  (required)
     * @param label Label of the API Gateway  (required)
     * @param apiId **API ID** consisting of the **UUID** of the API. The combination of the provider of the API, name of the API and the version is also accepted as a valid API I. Should be formatted as **provider-name-version**.  (required)
     * @return ApiResponse&lt;DeployResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeployResponseDTO> deployApiPostWithHttpInfo(String apiName, String label, String apiId) throws ApiException {
        com.squareup.okhttp.Call call = deployApiPostValidateBeforeCall(apiName, label, apiId, null, null);
        Type localVarReturnType = new TypeToken<DeployResponseDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deploy the API in the gateway (asynchronously)
     * This operation is used to deploy and API in the gateway. 
     * @param apiName Name of the API  (required)
     * @param label Label of the API Gateway  (required)
     * @param apiId **API ID** consisting of the **UUID** of the API. The combination of the provider of the API, name of the API and the version is also accepted as a valid API I. Should be formatted as **provider-name-version**.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deployApiPostAsync(String apiName, String label, String apiId, final ApiCallback<DeployResponseDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deployApiPostValidateBeforeCall(apiName, label, apiId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeployResponseDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
